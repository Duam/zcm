#include <iostream>
#include <sstream>
#include <set>

#include "Common.hpp"
#include "Emitter.hpp"
#include "GetOpt.hpp"
#include "ZCMGen.hpp"

#include "util/StringUtil.hpp"
#include "util/FileUtil.hpp"

using namespace std;

void setupOptionsJulia(GetOpt& gopt)
{
    gopt.addString(0, "julia-path", ".",
                      "Julia destination directory");

    gopt.addString(0, "julia-default-pkg", "zcmtypes",
                      "Julia default package, all types/packages will be inside default");

    gopt.addBool(  0, "julia-disable-runtime-assertions", false,
                      "Disable runtime assertions (in encode) for type/size checking in Julia");
}

// Some types do not have a 1:1 mapping from zcm types to native Julia storage types.
static string mapTypeName(const string& t)
{
    if      (t == "int8_t")   return "Int8";
    else if (t == "int16_t")  return "Int16";
    else if (t == "int32_t")  return "Int32";
    else if (t == "int64_t")  return "Int64";
    else if (t == "byte")     return "UInt8";
    else if (t == "float")    return "Float32";
    else if (t == "double")   return "Float64";
    else if (t == "string")   return "String";
    else if (t == "boolean")  return "Bool";
    else {
        return t;
    }
}

struct EmitJulia : public Emitter
{
    ZCMGen& zcm;
    ZCMStruct& zs;

    string hton, ntoh;

    bool enableRuntimeAssertions;

    EmitJulia(ZCMGen& zcm, ZCMStruct& zs, const string& fname):
        Emitter(fname), zcm(zcm), zs(zs),
        hton(zcm.gopt->getBool("little-endian-encoding") ? "htol" : "hton"),
        ntoh(zcm.gopt->getBool("little-endian-encoding") ? "ltoh" : "ntoh"),
        enableRuntimeAssertions(!zcm.gopt->getBool("julia-disable-runtime-assertions"))
    {}

    void emitAutoGeneratedWarning()
    {
        emit(0, "# THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY");
        emit(0, "# BY HAND!!");
        emit(0, "#");
        emit(0, "# Generated by zcm-gen");
        emit(0, "#");
        emit(0, "");
    }

    void emitComment(int indent, const string& comment)
    {
        if (comment == "")
            return;

        auto lines = StringUtil::split(comment, '\n');
        if (lines.size() == 1) {
            emit(indent, "# %s", lines[0].c_str());
        } else {
            for (auto& line : lines) {
                emitStart(indent, "#");
                if (line.size() > 0)
                    emitContinue("%s", line.c_str());
                emitEnd("");
            }
        }
    }

    string topLevelPackage(const string& package)
    {
        auto packageParts = StringUtil::split(package, '.');
        if (packageParts.size() > 0) {
            return packageParts.at(0);
        } else {
            return "";
        }
    }

    void emitDependencies()
    {
        unordered_set<string> imports;
        string zsPackage = topLevelPackage(zs.structname.package);
        if (zsPackage != "") {
            imports.insert("import " + zsPackage);
        }

        for (auto& zm : zs.members) {
            auto& tn = zm.type.fullname;
            if (!ZCMGen::isPrimitiveType(tn) &&
                imports.find(tn) == imports.end() &&
                tn != zs.structname.fullname) {
                string zmPackage = topLevelPackage(zm.type.package);
                if (zmPackage != "") {
                    // The dependent type belongs to some package
                    if (zmPackage == zsPackage) {
                        // Then this is a dependency on a package from somewhere
                        // in the same module, so we should import its outer
                        // Julia module
                        imports.insert("import _" + zm.type.nameUnderscore());
                    } else {
                        // Then this is a dependency on some other package, so
                        // we can just import the entire other package:
                        imports.insert("import " + zmPackage);
                    }
                } else {
                    // The dependent type does not belong to any package, so
                    // we just import it from its outer module
                    imports.insert("import _" + zm.type.shortname + ": " + zm.type.shortname);
                }
            }
        }

        if (zsPackage != "") {
            // The type we're creating is in a package, so we need to @eval its
            // definition into the right module
            emit(0, "import %s", zsPackage.c_str());
            emit(0, "eval(%s, quote", zs.structname.package.c_str());
        } else {
            // The type we're creating is not in a package, so we don't need to
            // do anything. But we'll create a "begin" block so that the number
            // of terminating "end" statements is the same no matter which path
            // was chosen here.
            emit(0, "(begin");
        }

        for (auto& tn : imports) {
            // Add all the necessary imports
            emit(0, tn.c_str());
        }

        emit(0, "");
        emit(0, "import ZCM");
        emit(0, "");
    }

    void emitModuleStart()
    {
        emitAutoGeneratedWarning();
        emit(0, "module _%s", zs.structname.nameUnderscoreCStr());
        emit(0, "");
    }

    void emitModuleEnd()
    {
        const char* sn = zs.structname.nameUnderscoreCStr();
        emit(0, "end) # from the `begin` or `quote` block above");
        emit(0, "end # module _%s;", sn);
    }

    void emitInstance()
    {
        const char* sn = zs.structname.shortname.c_str();

        emitDependencies();

        // define the class
        emitComment(0, zs.comment);
        emit(0, "export %s", sn);
        emit(0, "type %s <: ZCM.AbstractZCMType", sn);
        emit(0, "");

        // data members
        if (zs.members.size() > 0) {
            emit(1, "# **********************");
            emit(1, "# Members");
            emit(1, "# **********************");
            for (auto& zm : zs.members) {
                auto& mtn = zm.type.fullname;
                emitComment(2, zm.comment);

                string mappedTypename;
                if (zcm.isPrimitiveType(mtn)) mappedTypename = mapTypeName(mtn);
                else                          mappedTypename = "ZCM.AbstractZCMType";

                int ndim = (int)zm.dimensions.size();
                if (ndim == 0) {
                    emit(1, "%-30s::%s", zm.membername.c_str(), mappedTypename.c_str());
                } else {
                    emit(1, "%-30s::Array{%s,%u}", zm.membername.c_str(),
                                                   mappedTypename.c_str(), ndim);
                }
            }
            emit(0, "");
        }

        // constants
        if (zs.constants.size() > 0) {
            emit(0, "");
            emit(1, "# **********************");
            emit(1, "# Constants");
            emit(1, "# **********************");
            for (auto& zc : zs.constants) {
                assert(ZCMGen::isLegalConstType(zc.type));
                string mt = mapTypeName(zc.type);
                emit(1, "%-30s::%s", zc.membername.c_str(), mt.c_str(), zc.valstr.c_str());
            }
            emit(0, "");
        }

        emit(0, "");
        emit(1, "function %s()", sn);
        emit(0, "");
        emit(2, "self = new()");
        emit(0, "");

        // data members
        if (zs.members.size() > 0) {
            emit(2, "# **********************");
            emit(2, "# Members");
            emit(2, "# **********************");
            for (size_t i = 0; i < zs.members.size(); ++i) {
                auto& zm = zs.members[i];
                emitStart(2, "self.%s = ", zm.membername.c_str());
                emitMemberInitializer(zm);
                emitEnd("");
            }
            emit(0, "");
        }

        // constants
        if (zs.constants.size() > 0) {
            emit(2, "# **********************");
            emit(2, "# Constants");
            emit(2, "# **********************");

            for (auto& zc : zs.constants) {
                assert(ZCMGen::isLegalConstType(zc.type));
                string mt = mapTypeName(zc.type);
                emitStart(2, "self.%s::%s = ", zc.membername.c_str(), mt.c_str());
                if (zc.isFixedPoint())
                    emitEnd("reinterpret(%s,%s)", mt.c_str(), zc.valstr.c_str());
                else
                    emitEnd("%s", zc.valstr.c_str());
            }
            emit(0, "");
        }

        emit(2, "return self");
        emit(1, "end");
        emit(0, "");
        emit(0, "end");
        emit(0, "");
    }

    void emitMemberInitializer(ZCMMember& zm)
    {
        auto& tn = zm.type.fullname;
        string initializer;
        if      (tn == "byte")    initializer = "0";
        else if (tn == "boolean") initializer = "false";
        else if (tn == "int8_t")  initializer = "0";
        else if (tn == "int16_t") initializer = "0";
        else if (tn == "int32_t") initializer = "0";
        else if (tn == "int64_t") initializer = "0";
        else if (tn == "float")   initializer = "0.0";
        else if (tn == "double")  initializer = "0.0";
        else if (tn == "string")  initializer = "\"\"";
        else                      initializer = tn + "()";

        if (zm.dimensions.size() == 0) {
            emitContinue("%s", initializer.c_str());
        } else {
            emitContinue("[ %s for", initializer.c_str());
            for (size_t i = 0; i < zm.dimensions.size(); ++i) {
                auto& dim = zm.dimensions[i];
                if (i == 0) emitContinue(" ");
                else        emitContinue(", ");

                emitContinue("dim%d=1:", i);
                if (dim.mode == ZCM_CONST) emitContinue("%s",      dim.size.c_str());
                else                       emitContinue("self.%s", dim.size.c_str());
            }
            emitContinue(" ]");
        }
    }

    void emitGetHash()
    {
        auto* sn = zs.structname.shortname.c_str();

        emit(0, "const __%s_hash = Ref(Int64(0))", sn);

        emit(0, "function ZCM._get_hash_recursive(::Type{%s}, parents::Array{String})", sn);
        emit(1,     "if __%s_hash[] != 0; return __%s_hash[]; end", sn, sn);
        emit(1,     "if \"%s\" in parents; return 0; end", sn);
        for (auto& zm : zs.members) {
            if (!ZCMGen::isPrimitiveType(zm.type.fullname)) {
                emit(1, "newparents::Array{String} = [parents[:]; \"%s\"::String];", sn);
                break;
            }
        }
        emitStart(1, "hash::UInt64 = 0x%" PRIx64, zs.hash);
        for (auto &zm : zs.members) {
            if (!ZCMGen::isPrimitiveType(zm.type.fullname)) {
                string mtn = zm.type.package.empty() ? zm.type.shortname
                                                     : zm.type.package + "." + zm.type.shortname;
                emitContinue("+ reinterpret(UInt64, ZCM._get_hash_recursive(%s, newparents))",
                             mtn.c_str());
            }
        }
        emitEnd("");

        emit(1,     "hash = (hash << 1) + ((hash >>> 63) & 0x01)");
        emit(1,     "__%s_hash[] = reinterpret(Int64, hash)", sn);
        emit(1,     "return __%s_hash[]", sn);
        emit(0, "end");
        emit(0, "");
        emit(0, "function ZCM.getHash(::Type{%s})", sn);
        emit(1,     "return ZCM._get_hash_recursive(%s, Array{String,1}())", sn);
        emit(0, "end");
        emit(0, "");
    }

    void emitEncodeSingleMember(ZCMMember& zm, const string& accessor_, int indent)
    {
        const string& tn = zm.type.fullname;
        auto* accessor = accessor_.c_str();

        if (tn == "string") {
            emit(indent, "write(buf, %s(UInt32(length(%s) + 1)))", hton.c_str(), accessor);
            emit(indent, "write(buf, %s)", accessor);
            emit(indent, "write(buf, UInt8(0))");
        } else if (tn == "boolean") {
            emit(indent, "write(buf, %s)", accessor);
        } else if (tn == "byte"    || tn == "int8_t"  ||
                   tn == "int16_t" || tn == "int32_t" || tn == "int64_t" ||
                   tn == "float"   || tn == "double") {
            emit(indent, "write(buf, %s(%s))", hton.c_str(), accessor);
        } else {
            emit(indent, "ZCM._encode_one(%s,buf)", accessor);
        }
    }

    void emitEncodeListMember(ZCMMember& zm, const string& accessor_, int indent,
                              const string& len_, int fixedLen)
    {
        auto& tn = zm.type.fullname;
        auto* accessor = accessor_.c_str();
        auto* len = len_.c_str();

        if (tn == "byte" || tn == "boolean" || tn == "int8_t" ||
            tn == "int16_t" || tn == "int32_t" || tn == "int64_t" ||
            tn == "float"  || tn == "double") {
            if (tn != "boolean")
                emit(indent, "for i=1:%s%s %s[i] = %s(%s[i]) end",
                             (fixedLen ? "" : "msg."), len, accessor, hton.c_str(), accessor);
            emit(indent, "write(buf, %s[1:%s%s])",
                 accessor, (fixedLen ? "" : "msg."), len);
            return;
        } else {
            assert(0);
        }
    }

    void emitEncodeOne()
    {
        auto* sn = zs.structname.shortname.c_str();
        auto* fn = zs.structname.fullname.c_str();

        emit(0, "function ZCM._encode_one(msg::%s, buf)", sn);
        if (zs.members.size() == 0) {
            emit(1, "return nothing");
            emit(0, "end");
            return;
        }

        for (auto& zm : zs.members) {
            auto& mtn = zm.type.fullname;
            string mappedTypename = mapTypeName(mtn);

            if (zm.dimensions.size() == 0) {
                if (enableRuntimeAssertions && !zcm.isPrimitiveType(mtn))
                    emit(1, "@assert isa(msg.%s, %s) "
                            "\"Msg of type `%s` requires field `%s` to be of type `%s`\"",
                            zm.membername.c_str(), mappedTypename.c_str(),
                            fn, zm.membername.c_str(), mtn.c_str());

                emitEncodeSingleMember(zm, "msg." + zm.membername, 1);
            } else {
                string accessor = "msg." + zm.membername;

                size_t n;
                if (enableRuntimeAssertions) {
                    for (n = 0; n < zm.dimensions.size(); ++n) {
                        auto& dim = zm.dimensions[n];

                        string sz;
                        if (dim.mode == ZCM_CONST) sz = dim.size;
                        else                       sz = "msg." + dim.size;

                        emit(1, "@assert size(msg.%s,%d)==%s "
                                "\"Msg of type `%s` requires field `%s` dimension `%d` "
                                "to be size `%s`\"",
                                zm.membername.c_str(), n + 1, sz.c_str(),
                                fn, zm.membername.c_str(), n + 1,
                                sz.c_str());
                    }
                }

                accessor += "[";
                for (n = 0; n < zm.dimensions.size(); ++n) {
                    auto& dim = zm.dimensions[n];

                    if (dim.mode == ZCM_CONST) emit(n + 1, "for i%d=1:%s",     n, dim.size.c_str());
                    else                       emit(n + 1, "for i%d=1:msg.%s", n, dim.size.c_str());

                    if (n > 0) accessor += ",";
                    accessor += "i" + to_string(n);
                }
                accessor += "]";

                if (enableRuntimeAssertions && !zcm.isPrimitiveType(mtn)) {
                    emit(n + 1, "@assert isa(%s, %s) "
                                "\"Msg of type `%s` requires field `%s` to be of type `%s`\"",
                                accessor.c_str(), mappedTypename.c_str(),
                                fn, accessor.c_str(), mtn.c_str());
                }

                emitEncodeSingleMember(zm, accessor, n + 1);

                for (n = 0; n < zm.dimensions.size(); ++n)
                    emit(zm.dimensions.size() - n, "end");

                /* RRR: probably can make use of encoding more than 1 element at once for prims
                // last dimension.
                auto& lastDim = zm.dimensions[zm.dimensions.size() - 1];
                bool lastDimFixedLen = (lastDim.mode == ZCM_CONST);

                if (ZCMGen::isPrimitiveType(zm.type.fullname) &&
                    zm.type.fullname != "string") {
                    emitEncodeListMember(zm, accessor, n + 1, lastDim.size, lastDimFixedLen);
                }
                */
            }
        }

        emit(0, "end");
        emit(0, "");
    }

    void emitEncode()
    {
        auto* sn = zs.structname.shortname.c_str();

        emit(0, "function ZCM.encode(msg::%s)", sn);
        emit(1,     "buf = IOBuffer()");
        emit(1,     "write(buf, %s(ZCM.getHash(%s)))", hton.c_str(), sn);
        emit(1,     "ZCM._encode_one(msg, buf)");
        emit(1,     "return ZCM._takebuf_array(buf);");
        emit(0, "end");
        emit(0, "");
    }

    void emitDecodeSingleMember(ZCMMember& zm, const string& accessor_,
                                int indent, const string& sfx_)
    {
        auto& tn = zm.type.fullname;
        string mappedTypename = mapTypeName(tn);

        auto* accessor = accessor_.c_str();
        auto* sfx = sfx_.c_str();

        if (tn == "string") {
            emit(indent, "%sString(read(buf, %s(reinterpret(UInt32, read(buf, 4))[1])))[1:end-1]%s",
                         accessor, ntoh.c_str(), sfx);
        } else if (tn == "byte"    || tn == "boolean" || tn == "int8_t") {
            auto typeSize = ZCMGen::getPrimitiveTypeSize(tn);
            emit(indent, "%sreinterpret(%s, read(buf, %u))[1]%s",
                         accessor, mappedTypename.c_str(), typeSize, sfx);
        } else if (tn == "int16_t" || tn == "int32_t" || tn == "int64_t" ||
                   tn == "float"   || tn == "double") {
            auto typeSize = ZCMGen::getPrimitiveTypeSize(tn);
            emit(indent, "%s%s(reinterpret(%s, read(buf, %u))[1])%s",
                         accessor, ntoh.c_str(), mappedTypename.c_str(), typeSize, sfx);
        } else {
            emit(indent, "%sZCM._decode_one(%s,buf)%s", accessor, mappedTypename.c_str(), sfx);
        }
    }

    void emitDecodeListMember(ZCMMember& zm, const string& accessor_, int indent,
                              bool isFirst, const string& len_, bool fixedLen)
    {
        auto& tn = zm.type.fullname;
        string mappedTypename = mapTypeName(tn);
        const char* suffix = isFirst ? "" : ")";
        auto* accessor = accessor_.c_str();
        auto* len = len_.c_str();

        if (tn == "byte" || tn == "boolean" || tn == "int8_t" ) {
            if (fixedLen) {
                emit(indent, "%sreinterpret(%s, read(buf, %d))%s",
                     accessor, mappedTypename.c_str(),
                     atoi(len) * ZCMGen::getPrimitiveTypeSize(tn),
                     suffix);
            } else {
                emit(indent, "%sreinterpret(%s, read(buf, (msg.%s) * %lu))%s",
                     accessor, mappedTypename.c_str(),
                     len, ZCMGen::getPrimitiveTypeSize(tn),
                     suffix);
            }
        } else if (tn == "int16_t" || tn == "int32_t" || tn == "int64_t" ||
                   tn == "float"   || tn == "double") {
            if (fixedLen) {
                emit(indent, "%s%s.(reinterpret(%s, read(buf, %d)))%s",
                     accessor, ntoh.c_str(), mappedTypename.c_str(),
                     atoi(len) * ZCMGen::getPrimitiveTypeSize(tn),
                     suffix);
            } else {
                emit(indent, "%s%s.(reinterpret(%s, read(buf, (msg.%s) * %lu)))%s",
                     accessor, ntoh.c_str(), mappedTypename.c_str(),
                     len, ZCMGen::getPrimitiveTypeSize(tn),
                     suffix);
            }
        } else {
            assert(0);
        }
    }

    void emitDecodeOne()
    {
        auto* sn = zs.structname.shortname.c_str();

        emit(0, "function ZCM._decode_one(::Type{%s}, buf)", sn);
        emit(1,     "msg = %s();", sn);

        for (auto& zm : zs.members) {
            if (zm.dimensions.size() == 0) {
                string accessor = "msg." + zm.membername + " = ";
                emitDecodeSingleMember(zm, accessor.c_str(), 1, "");
            } else {
                string accessor = "msg." + zm.membername;
                size_t n = 0;

                auto& mtn = zm.type.fullname;
                string mappedTypename;
                if (zcm.isPrimitiveType(mtn)) mappedTypename = mapTypeName(mtn);
                else                          mappedTypename = "ZCM.AbstractZCMType";

                // emit array initializer for sizing
                emitStart(1, "%s = Array{%s, %d}(",
                             accessor.c_str(), mappedTypename.c_str(), zm.dimensions.size());
                for (n = 0; n < zm.dimensions.size(); ++n) {
                    auto& dim = zm.dimensions[n];

                    if (n > 0) emitContinue(",");
                    if (dim.mode == ZCM_CONST) emitContinue("%s",     dim.size.c_str());
                    else                       emitContinue("msg.%s", dim.size.c_str());
                }
                emitEnd(")");

                // iterate through the dimensions of the member, building up
                // an accessor string, and emitting for loops
                accessor += "[";
                for (n = 0; n < zm.dimensions.size(); ++n) {
                    auto& dim = zm.dimensions[n];

                    if (dim.mode == ZCM_CONST) emit(n + 1, "for i%d=1:%s",     n, dim.size.c_str());
                    else                       emit(n + 1, "for i%d=1:msg.%s", n, dim.size.c_str());

                    if (n > 0) accessor += ",";
                    accessor += "i" + to_string(n);
                }
                accessor += "] = ";

                emitDecodeSingleMember(zm, accessor, n + 1, "");

                for (n = 0; n < zm.dimensions.size(); ++n)
                    emit(zm.dimensions.size() - n, "end");


                /* RRR: probably can make use of decoding more than 1 element at once for prims
                // last dimension.
                auto& lastDim = zm.dimensions[zm.dimensions.size()-1];
                bool lastDimFixedLen = (lastDim.mode == ZCM_CONST);

                if (ZCMGen::isPrimitiveType(zm.type.fullname) &&
                    zm.type.fullname != "string") {
                    // member is a primitive non-string type.  Emit code to
                    // decode a full array in one call to struct.unpack
                    if(n == 0) {
                        accessor += " = ";
                    } else {
                        accessor += ".append(";
                    }

                    emitDecodeListMember(zm, accessor, n + 1, n==0,
                                         lastDim.size, lastDimFixedLen);
                }
                */
            }
        }
        emit(1, "return msg");
        emit(0, "end");
        emit(0, "");
    }

    void emitDecode()
    {
        auto* sn = zs.structname.shortname.c_str();

        emit(0, "function ZCM.decode(::Type{%s}, data::Vector{UInt8})", sn);
        emit(1,     "buf = IOBuffer(data)");
        emit(1,     "if %s(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(%s)",
                ntoh.c_str(), sn);
        emit(2,         "throw(\"Decode error\")");
        emit(1,     "end");
        emit(1,     "return ZCM._decode_one(%s, buf)", sn);
        emit(0, "end");
        emit(0, "");
    }

    void emitType()
    {
        emitModuleStart();
        emitInstance();
        emitGetHash();
        emitEncodeOne();
        emitEncode();
        emitDecodeOne();
        emitDecode();
        emitModuleEnd();
    }
};

struct JlEmitPack : public Emitter
{
    ZCMGen& zcm;

    JlEmitPack(ZCMGen& zcm, const string& fname):
        Emitter(fname), zcm(zcm) {}

    int emitPackage(const string& packName, vector<ZCMStruct*>& packStructs)
    {
        // create the package directory, if necessary
        vector<string> dirs = StringUtil::split(packName, '.');
        int havePackage = dirs.size() > 0;
        string pdname;
        if (havePackage) {
            pdname = dirs.at(0);
        } else {
            pdname = "";
        }
        auto& juliapath = zcm.gopt->getString("julia-path");
        string packageDirPrefix = juliapath + ((juliapath.size() > 0) ? "/" : "");
        string packageDir = packageDirPrefix + pdname + (havePackage ? "/" : "");

        if (packageDir != "") {
            if (!FileUtil::exists(packageDir)) {
                FileUtil::mkdirWithParents(packageDir, 0755);
            }
            if (!FileUtil::dirExists(packageDir)) {
                cerr << "Could not create directory " << packageDir << "\n";
                return -1;
            }
        }

        // write the main package module, if any

        // Keep track of which types were already imported into the module
        unordered_set<string> moduleJlImports;

        // Keep track of which submodules were already defined. Note that this
        // set is sorted because we always have to define foo.bar before we
        // can define foo.bar.baz
        set<string> moduleJlSubmodules;
        moduleJlSubmodules.insert(packName);

        FILE* moduleJlFp = nullptr;
        if (havePackage) {
            // If we are inside a package, then we need to generate a single
            // Julia file containing the top-level module and any submodules

            // For a type foo.bar.baz.t1, we will put the module file in
            // foo.jl
            vector<string> moduleJlFnameParts;
            moduleJlFnameParts.push_back(packageDirPrefix);
            moduleJlFnameParts.push_back(pdname + ".jl");
            string moduleJlFname = StringUtil::join(moduleJlFnameParts, '/');
            if (moduleJlFp) {
                fclose(moduleJlFp);
                moduleJlFp = nullptr;
            }
            if (FileUtil::exists(moduleJlFname)) {
                // If the module exists already, then we need to parse it and
                // extract any existing sub-modules and types contained in the
                // module. We'll include those entries in the final generated
                // module file.
                moduleJlFp = fopen(moduleJlFname.c_str(), "r");
                if (!moduleJlFp) {
                    perror("fopen");
                    return -1;
                }
                // Read chunks of the existing file line by line
                while(!feof(moduleJlFp)) {
                    char buf[4096];
                    memset(buf, 0, sizeof(buf));
                    char* result = fgets(buf, sizeof(buf)-1, moduleJlFp);
                    if (!result) break;

                    auto words = StringUtil::split(StringUtil::strip(buf), ' ');
                    if (words.size() >= 2 && words[0] == "import") {
                        // If this line matches "import foo", then store "foo" in
                        // the set of imports
                        moduleJlImports.insert(words[1]);
                    } else if (words.size() >= 7 &&
                               words[0] == "eval(" &&
                               words[2] == "," &&
                               words[3] == ":(module" &&
                               words[5] == ";" &&
                               words[6] == "end))\n") {
                        // Otherwise, if the line matches:
                        // @eval foo module bar.baz ; end
                        // then store foo.bar.baz in the submodules set
                        moduleJlSubmodules.insert(words[1] + "." + words[4]);
                    }
                }
                fclose(moduleJlFp);
                moduleJlFp = nullptr;
            }
            // Regardless of whether the module existed, we'll create a new file
            moduleJlFp = fopen(moduleJlFname.c_str(), "w");
            if (!moduleJlFp) {
                perror("fopen");
                return -1;
            }
            fprintf(moduleJlFp, "\"\"\"ZCM package %s.jl file\n"
                     "This file automatically generated by zcm-gen.\n"
                     "DO NOT MODIFY BY HAND!!!!\n"
                     "\"\"\"\n\n"
                     "module %s; end\n\n",
                     pdname.c_str(), pdname.c_str());
            for (auto& submod : moduleJlSubmodules) {
                auto parts = StringUtil::split(submod, '.');
                if (parts.size() >= 2) {
                    // Restore each of the submodules we parsed from the
                    // existing file (if any), and also generate the submodule
                    // corresponding to the current package (if necessary)
                    vector<string> parentParts(parts.begin(), parts.end() - 1);
                    auto parent = StringUtil::join(parentParts, '.');
                    auto module = parts.at(parts.size() - 1);
                    fprintf(moduleJlFp, "eval( %s , :(module %s ; end))\n", parent.c_str(), module.c_str());
                }
            }
            // LOAD_PATH controls where Julia looks for files you `import`.
            // We're going to tell Julia that if we're in a package foo.bar.baz,
            // it should first look in the `foo/` folder for any types it imports.
            // unshift!(x, y) in Julia prepends y to the vector x. Its opposite
            // is shift!(x) which removes the first element of x. We'll put that
            // shift!(LOAD_PATH) in a `finally` block to ensure that the
            // LOAD_PATH is restored even if something goes wrong with the
            // imports
            fprintf(moduleJlFp, "\nunshift!(LOAD_PATH, joinpath(dirname(@__FILE__), \"%s\"))\n", pdname.c_str());
            fprintf(moduleJlFp, "try\n");
            for (auto& import : moduleJlImports) {
                // Restore each of the existing imports. Each import defines a
                // single ZCM type somewhere in the package or one of its
                // submodule
                fprintf(moduleJlFp, "import %s", import.c_str());
            }
        }

        ////////////////////////////////////////////////////////////
        // STRUCTS
        for (auto* zs_ : packStructs) {
            auto& zs = *zs_;
            string path = packageDir + "_" + zs.structname.nameUnderscore() + ".jl";

            // If we're in a package, then add an appropriate import statement
            // to ensure that this struct is added to the Julia module
            if(moduleJlFp) {
                fprintf(moduleJlFp, "import _%s\n", zs.structname.nameUnderscoreCStr());
            }

            if (!zcm.needsGeneration(zs.zcmfile, path))
                continue;

            EmitJulia E{zcm, zs, path};
            if (!E.good()) return -1;
            E.emitType();
        }

        if(moduleJlFp) {
            // Restore LOAD_PATH no matter what
            fprintf(moduleJlFp, "finally\n");
            fprintf(moduleJlFp, "    shift!(LOAD_PATH)\n");
            fprintf(moduleJlFp, "end\n");
            fclose(moduleJlFp);
            moduleJlFp = nullptr;
        }

        return 0;
    }
};

int emitJulia(ZCMGen& zcm)
{
    cout << "Checking default package : " << zcm.gopt->wasSpecified("julia-default-pkg")
         << " " << zcm.gopt->getString("julia-default-pkg") << endl;

    // Copied wholesale from EmitPython.cpp
    unordered_map<string, vector<ZCMStruct*> > packages;

    // group the structs by package
    for (auto& zs : zcm.structs)
        packages[zs.structname.package].push_back(&zs);

    for (auto& kv : packages) {
        auto& name = kv.first;
        auto& pack = kv.second;
        int ret = JlEmitPack{zcm, name}.emitPackage(name, pack);
        if (ret != 0) return ret;
    }

    return 0;
}
